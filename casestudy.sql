create database casestudy
use casestudy

select * from Fact
select * from Locations
select * from Product

--1. Display the number of states present in the LocationTable.

select count(distinct State) as [No of state] from Locations
--2. How many products are of regular type ?
select count(distinct Product) as [No of Products] from Product where Type = 'regular'
--3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as [Total Marketing Cost] from Fact where ProductId = 1
--4. What is the minimum sales of a product ?

--5. Display max Cost of Good Sold(COGS).
select max(COGS) as [Max COGS] from Fact
--6. Display the Details of the productid where product type is coffee
select ProductId from Product where Product_Type = 'coffee'
--7. Display the details where total_expenses is greater than 40.
select * from Fact where Total_Expenses > 40

--8. What is the average sales in Area_Code 719 ?
select avg(Sales) as [Avg Sales] from Fact where Area_Code = 719

--9. Find out the total profit generated by Colorado state.

select sum(Profit) as [Total Profit] from Fact where Area_Code in
          (select Area_Code from Locations where State = 'Colorado')


--10. Display the average inventory for each product id.
select ProductId, avg(Inventory) as [Avg Inventory Cost] from Fact
group by ProductId
order by ProductId

--11. Display state in a sequential order in a location table.
select distinct State from Locations order by State

--12. Display the average budget margin of the area_code where average budget margin should be
--    greater than 100.
select Area_Code,avg(Budget_Margin) as [Avg Margin] from Fact
group by Area_Code
having avg(Budget_Margin) > 100
order by Area_Code

--13. What is the total sales done on date 2010-01-01
select sum(Sales) as [Total Sales] from Fact where Date = '2010-01-01'

--14. Display the average total expense of each product id on individual date
select Date,ProductId, avg(Total_Expenses) as [Avg expenses] from Fact
group by Date,ProductId
order by Date,ProductId

--15. Display the table with the following attributes such as
--    Date, productid, product_type, product, Sales, profit, state, area_code
select f.Date,p.ProductId,p.Product_Type,p.Product,f.Sales,f.Profit,L.State,L.Area_Code 
from Fact f
inner join Locations L on f.Area_Code = L.Area_Code
inner join Product p on f.ProductId = p.ProductId

--16. Display the rank without any gap to show the Sales wise rank.
select *,DENSE_RANK()over(order by sales desc) as [DRank] from Fact

--17. Find the State wise Profit and Sales.
select L.State, sum(f.Profit) as [total profit], sum(f.Sales) as [total sales] from Fact f
inner join Locations L
on f.Area_Code = l.Area_Code
group by L.State

--18. Find the State wise Profit and Sales along with the Product Name.
select L.State, p.Product ,sum(f.Profit) as [Total profit], sum(f.Sales) as [Total sales]
from Fact f
inner join Locations L on f.Area_Code = L.Area_Code
inner join Product p on f.ProductId = p.ProductId
group by L.State, p.Product

--19.  If there is an increase in sales of 5%. Calculate the increased sales.
select Sales,(Sales * 1.05) as [Increased sales by 5%] from Fact

--20. Find the maximum profit along with the Product id and Product Type.
select p.ProductId,p.Product_Type,max(f.Profit) as [Max Profit] from Fact f
inner join Product p
on f.ProductId = p.ProductId
group by p.ProductId,p.Product_Type
order by p.ProductId,p.Product_Type

--21. Create a Stored Procedure to fetch the result according to the product type from Product
create procedure proc_product @ptype varchar(30)
as
select * from Product where Product_Type = @ptype

exec proc_product 'coffee'

--22. Write a query by creating a condition in which if the total expenses 
--    is less than 60 then it is a profit or else loss.
select Total_Expenses,IIF(Total_Expenses < 60, 'Profit','Loss') as [Status] from Fact

--23. Give the total weekly sales value with the Date and productid details. 
--    Use roll-up to pull the data in hierarchical order.
select DATEPART(WEEK,Date) as [Week], ProductId, sum(Sales) as [Total Sales] from Fact
group by DATEPART(WEEK,Date), ProductId with rollup
order by DATEPART(WEEK,Date), ProductId

--24. Apply union and intersection operator on the tables which consist of attribute area code.
select Area_Code from Fact
union
select Area_Code from Locations

select Area_Code from Fact
intersect
select Area_Code from Locations

--25. Create a user-defined function for the product table to fetch a particular 
--    product type based on the user’s preference.
create function func_product(@ptype varchar(30))
returns table
return
(select * from Product where Product_Type = @ptype)

select * from func_product('tea')

--26.Change the product type from coffee to tea where product id is 1 and undo it.
begin transaction
update Product
set Product_Type = 'Tea'
where ProductId = 1

rollback transaction

select * from Product


--27. Display the Date, productid and sales where total expenses are between 100 to 200.
select Date,ProductId,Sales from Fact where Total_Expenses between 100 and 200

--28. Delete the records in the product table for regular type.
begin transaction
delete from Product where Type = 'regular'

rollback transaction

select * from Product

--29. Display the ASCII value of the fifth character from the column product.
select PRODUCT,SUBSTRING(PRODUCT,5,1) as [character],ASCII(SUBSTRING(PRODUCT,5,1)) as [ASCII]
from PRODUCT